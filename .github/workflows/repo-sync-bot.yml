name: Sync Repositories

on:
  # Trigger on pushes to any branch
  push:
    branches: [ '**' ]
  # Optional: Allow manual triggering
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Force push to target repository'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  sync:
    runs-on: ubuntu-latest
    
    # Ensure proper permissions
    permissions:
      contents: write
      
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source-repo
      
      - name: Extract branch name from push event
        run: |
          echo "SOURCE_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        
      - name: Load Environment Variables
        run: |
          cd source-repo
          if [ -f .env ]; then
            echo "Loading configuration from .env file"
            set -a
            . ./.env
            set +a
            echo "TARGET_REPO_URL=$TARGET_REPO_URL" >> $GITHUB_ENV
            
            # Extract owner/repo format for GitHub Actions
            REPO_PARTS=$(echo $TARGET_REPO_URL | sed -E 's|https://github.com/||' | sed -E 's|\.git$||')
            echo "REPO_PATH=$REPO_PARTS" >> $GITHUB_ENV
            
            if [ -n "$TARGET_BRANCH" ]; then
              echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
            else
              if [ "$SOURCE_BRANCH" = "main" ]; then
                echo "TARGET_BRANCH=RepoBot" >> $GITHUB_ENV
              else
                echo "TARGET_BRANCH=$SOURCE_BRANCH" >> $GITHUB_ENV
              fi
            fi
          else
            echo "No .env file found, using repository secrets"
            echo "TARGET_REPO_URL=${{ secrets.TARGET_REPO_URL }}" >> $GITHUB_ENV
            
            # Extract owner/repo format for GitHub Actions
            REPO_PARTS=$(echo ${{ secrets.TARGET_REPO_URL }} | sed -E 's|https://github.com/||' | sed -E 's|\.git$||')
            echo "REPO_PATH=$REPO_PARTS" >> $GITHUB_ENV
            
            if [ "$SOURCE_BRANCH" = "main" ]; then
              echo "TARGET_BRANCH=RepoBot" >> $GITHUB_ENV
            else
              echo "TARGET_BRANCH=$SOURCE_BRANCH" >> $GITHUB_ENV
            fi
          fi
      
      - name: Checkout Target Repository
        id: checkout-target
        env:
          GH_PAT: ${{ secrets.SYNC_TOKEN }}
        run: |
          # Clone the target repository using token
          git clone https://x-access-token:${GH_PAT}@${TARGET_REPO_URL#https://} target-repo
          echo "Target repo clone status: $?"
        continue-on-error: true  # Continue if target repo doesn't exist yet
      
      - name: Setup Target Repository
        env:
          GH_PAT: ${{ secrets.SYNC_TOKEN }}
        run: |
          if [ ! -d "target-repo/.git" ]; then
            echo "Target repository not found, creating a new one"
            mkdir -p target-repo
            cd target-repo
            git init
            git checkout -b $TARGET_BRANCH
            echo "# Initial commit" > README.md
            git add README.md
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Initial commit"
            git remote add origin https://x-access-token:${GH_PAT}@${TARGET_REPO_URL#https://}
            git push -u origin $TARGET_BRANCH
          else
            cd target-repo
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git checkout $TARGET_BRANCH 2>/dev/null || git checkout -b $TARGET_BRANCH
          fi
      
      - name: Sync Files
        env:
          GH_PAT: ${{ secrets.SYNC_TOKEN }}
        run: |
          # Get stats from source repo for the markdown file
          cd source-repo
          LAST_COMMIT=$(git log -1 --pretty=format:'%H')
          LAST_COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          LAST_COMMIT_DATE=$(git log -1 --pretty=format:'%ad' --date=format:'%Y-%m-%d %H:%M:%S')
          LAST_COMMIT_FILES=$(git show --name-only --format='' $LAST_COMMIT | wc -l)
          
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV
          echo "LAST_COMMIT_MSG=$LAST_COMMIT_MSG" >> $GITHUB_ENV
          echo "LAST_COMMIT_AUTHOR=$LAST_COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "LAST_COMMIT_DATE=$LAST_COMMIT_DATE" >> $GITHUB_ENV
          echo "LAST_COMMIT_FILES=$LAST_COMMIT_FILES" >> $GITHUB_ENV
          
          # Remove all files from target repo except .git
          cd ../target-repo
          find . -mindepth 1 -not -path "./.git*" -delete
          
          # Copy all files from source repo to target
          cp -r ../source-repo/. .
          rm -rf .git
          
          # Add and commit changes
          git add --all
          if git status --porcelain | grep .; then
            git commit -m "Sync files from source repository"
            echo "SYNCED_COMMITS=1" >> $GITHUB_ENV
          else
            echo "No changes to commit"
            echo "SYNCED_COMMITS=0" >> $GITHUB_ENV
          fi
      
      - name: Create Status Markdown File
        run: |
          cd target-repo
          
          # Create markdown file with sync details
          cat > sync-status.md << EOF
          # Repository Sync Status
          
          Last synchronized on: **2025-04-02 10:32:12**
          
          ## Latest Commit Details
          
          | Detail | Value |
          | ------ | ----- |
          | Commit Hash | \`${LAST_COMMIT}\` |
          | Commit Message | ${LAST_COMMIT_MSG} |
          | Author | ${LAST_COMMIT_AUTHOR} |
          | Date | ${LAST_COMMIT_DATE} |
          | Files Changed | ${LAST_COMMIT_FILES} |
          
          
          > Synced By Automatic Repository Syncing Bot
          
          
          ###### Copyright © 2025 Saviru Kashmira Atapattu
          
          ## Sync Statistics
          - Source Branch: \`${SOURCE_BRANCH}\`
          - Target Branch: \`${TARGET_BRANCH}\`
          
          *This file was automatically generated by the repo-sync-bot.*
          
          ## Repository Links
          - [Source Repository](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY})
          - [Target Repository](${TARGET_REPO_URL})
          EOF
          
          git add sync-status.md
          git commit -m "Update sync status [skip ci]"
      
      - name: Push Changes
        env:
          GH_PAT: ${{ secrets.SYNC_TOKEN }}
        run: |
          cd target-repo
          
          # Push using token authentication
          FORCE_OPTION=""
          if [[ "${{ github.event.inputs.force_push }}" == "true" ]]; then
            FORCE_OPTION="--force"
          fi
          
          # Construct authenticated URL
          AUTH_URL="https://x-access-token:${GH_PAT}@${TARGET_REPO_URL#https://}"
          
          # Push changes
          echo "Pushing to $TARGET_BRANCH branch..."
          git push $FORCE_OPTION $AUTH_URL $TARGET_BRANCH
          
          echo "✅ Successfully pushed changes to target repository"